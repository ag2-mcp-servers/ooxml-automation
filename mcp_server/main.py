# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:40:39+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, UploadFile

from models import (
    ChartAxes,
    ChartAxisDataTypes,
    ChartChartData,
    ChartChartDataDTO,
    ChartCharts,
    ChartChartsDetails,
    ChartColumnCollections,
    ChartColumns,
    ChartDataPoints,
    ChartPlotType,
    ChartRowCol,
    ChartRowCollections,
    ChartRowNameFormatTypes,
    ChartRows,
    ChartsAxisDataTypesGetResponse,
    ChartsChildObjectsIdGetResponse,
    ChartsPlotTypeGetResponse,
    ChartsRowColGetResponse,
    ChartsRowNameFormatTypesGetResponse,
    ConnectionShapesChildObjectsIdGetResponse,
    Document,
    DocumentCloneDTO,
    DocumentsChildObjectsIdGetResponse,
    DocumentsDocumentTypeGetResponse,
    DocumentsPostResponse,
    DocumentType,
    GroupsChildObjectsIdGetResponse,
    ImagesChildObjectsIdGetResponse,
    OoxmlDTO,
    ProblemDetails,
    ShapesChildObjectsIdGetResponse,
    ShapeTreesChildObjectsIdGetResponse,
    SharedColorTransformationAttributes,
    SharedColorTransformations,
    SharedColorTypes,
    SharedColorTypesGetResponse,
    SharedDashTypes,
    SharedDashTypesGetResponse,
    SharedEffectAttributes,
    SharedEffects,
    SharedEffectTypes,
    SharedEffectTypesGetResponse,
    SharedFillMap,
    SharedFillTypes,
    SharedFillTypesGetResponse,
    SharedGradientFills,
    SharedGradientStops,
    SharedImageFills,
    SharedLineEndSizes,
    SharedLineEndSizesGetResponse,
    SharedLineEndTypes,
    SharedLineEndTypesGetResponse,
    SharedLines,
    SharedParagraph,
    SharedPictures,
    SharedPicturesDetails,
    SharedSolidFills,
    SharedText,
    SharedTextContainer,
    SlideColorMaps,
    SlideConnector,
    SlideConnectorDetails,
    SlideGraphics,
    SlideGraphicTypes,
    SlideGroupElements,
    SlideGroupElementTypes,
    SlideGroups,
    SlideGroupsDetails,
    SlidesChildObjectsIdGetResponse,
    SlidesGraphicTypesGetResponse,
    SlidesGroupElementTypesGetResponse,
    SlideShapes,
    SlideShapesDetails,
    SlideShapeTrees,
    SlideShapeTreesDetails,
    SlideSlideMasters,
    SlideSlides,
    SlideSlidesDetails,
    SlideSmartArts,
    SlideSmartArtsDetails,
    SmartArtsChildObjectsIdGetResponse,
    TableBorders,
    TableCells,
    TableColumns,
    TableRows,
    TablesChildObjectsIdGetResponse,
    TableTableDataDTO,
    TableTables,
    TableTablesDetails,
    ThemeBackgroundFills,
    ThemeColors,
    ThemeCustomColors,
    ThemeEffectMap,
    ThemeFills,
    ThemeFonts,
    ThemeIntensity,
    ThemeLineMap,
    ThemesChildObjectsIdGetResponse,
    ThemesIntensityGetResponse,
    ThemeThemes,
    ThemeThemesDetails,
)

app = MCPProxy(
    description='This API helps users convert Excel and Powerpoint documents into rich, live dashboards and stories.',
    title='OOXML Automation',
    version='0.1.0',
    servers=[{'url': 'https://api.presalytics.io/ooxml-automation'}],
)


@app.get(
    '/Charts/Axes/{id}',
    description=""" Get by Id: Use this method to retrieve a Axes object by its primary key (id) """,
    tags=['chart_axis_management', 'chart_operations'],
)
def chart_axes_get_id(id: UUID):
    """
    Axes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/AxisDataTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the AxisDataTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Chart object space. """,
    tags=['chart_axis_management', 'chart_data_management', 'chart_type_management'],
)
def chart_axisdatatypes_get():
    """
    AxisDataTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/AxisDataTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['chart_axis_management', 'chart_data_management'],
)
def chart_axisdatatypes_typeid_get_type_id(type_id: int):
    """
    AxisDataTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/AxisDataTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a AxisDataTypes object by its primary key (id) """,
    tags=['chart_axis_management', 'chart_data_management'],
)
def chart_axisdatatypes_get_id(id: UUID):
    """
    AxisDataTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/ChartData/{id}',
    description=""" Get by Id: Use this method to retrieve a ChartData object by its primary key (id) """,
    tags=['chart_data_management', 'chart_operations'],
)
def chart_chartdata_get_id(id: UUID):
    """
    ChartData: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/ChartUpdate/{id}',
    description=""" Gets a ChartDataDTO object, usually used for downstream analytics and chart updates """,
    tags=['chart_operations', 'chart_data_management'],
)
def charts_charts_chartupdate_get_id(id: UUID):
    """
    Charts: Get Chart Data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Charts/ChartUpdate/{id}',
    description=""" Simplifies chart update by allowing users to supply data via ChartDataDTO """,
    tags=['chart_operations', 'chart_data_management'],
)
def charts_charts_chartupdate_put_id(id: UUID, body: ChartChartDataDTO = None):
    """
    Charts: Update Chart Data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Chart and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'chart_operations'],
)
def charts_charts_childobjects_get_id(id: UUID):
    """
    Charts: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/ColumnCollections/{id}',
    description=""" Get by Id: Use this method to retrieve a ColumnCollections object by its primary key (id) """,
    tags=['chart_data_management', 'chart_operations'],
)
def chart_columncollections_get_id(id: UUID):
    """
    ColumnCollections: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/Columns/{id}',
    description=""" Get by Id: Use this method to retrieve a Columns object by its primary key (id) """,
    tags=['chart_data_management', 'text_container_management'],
)
def chart_columns_get_id(id: UUID):
    """
    Columns: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/DataPoints/{id}',
    description=""" Get by Id: Use this method to retrieve a DataPoints object by its primary key (id) """,
    tags=['chart_data_management', 'document_management'],
)
def chart_datapoints_get_id(id: UUID):
    """
    DataPoints: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['chart_operations', 'chart_data_management'],
)
def charts_charts_details_get_id(id: UUID):
    """
    Charts: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Chart object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Chart objects. """,
    tags=['chart_operations', 'chart_xml_management'],
)
def charts_charts_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Charts: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Charts/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Chart object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Chart objects. """,
    tags=['chart_operations', 'chart_xml_management'],
)
def charts_charts_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Charts: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/PlotType',
    description=""" List Types: Use this method to retreive a list of possible options for the PlotType type. Use the Id from oneof the returned elements on to make changes to elements in the Chart object space. """,
    tags=['chart_type_management'],
)
def chart_plottype_get():
    """
    PlotType: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/PlotType/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['chart_type_management', 'chart_operations'],
)
def chart_plottype_typeid_get_type_id(type_id: int):
    """
    PlotType: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/PlotType/{id}',
    description=""" Get by Id: Use this method to retrieve a PlotType object by its primary key (id) """,
    tags=['chart_type_management'],
)
def chart_plottype_get_id(id: UUID):
    """
    PlotType: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/RowCol',
    description=""" List Types: Use this method to retreive a list of possible options for the RowCol type. Use the Id from oneof the returned elements on to make changes to elements in the Chart object space. """,
    tags=['chart_data_management', 'chart_type_management'],
)
def chart_rowcol_get():
    """
    RowCol: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/RowCol/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['chart_data_management', 'chart_type_management'],
)
def chart_rowcol_typeid_get_type_id(type_id: int):
    """
    RowCol: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/RowCol/{id}',
    description=""" Get by Id: Use this method to retrieve a RowCol object by its primary key (id) """,
    tags=['chart_data_management', 'slides_management', 'table_management'],
)
def chart_rowcol_get_id(id: UUID):
    """
    RowCol: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/RowCollections/{id}',
    description=""" Get by Id: Use this method to retrieve a RowCollections object by its primary key (id) """,
    tags=['chart_data_management', 'paragraph_management', 'text_container_management'],
)
def chart_rowcollections_get_id(id: UUID):
    """
    RowCollections: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/RowNameFormatTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the RowNameFormatTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Chart object space. """,
    tags=['chart_type_management', 'chart_data_management'],
)
def chart_rownameformattypes_get():
    """
    RowNameFormatTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/RowNameFormatTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['chart_type_management', 'chart_data_management'],
)
def chart_rownameformattypes_typeid_get_type_id(type_id: int):
    """
    RowNameFormatTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/RowNameFormatTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a RowNameFormatTypes object by its primary key (id) """,
    tags=['chart_data_management', 'chart_operations'],
)
def chart_rownameformattypes_get_id(id: UUID):
    """
    RowNameFormatTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/Rows/{id}',
    description=""" Get by Id: Use this method to retrieve a Rows object by its primary key (id) """,
    tags=['chart_data_management', 'table_management'],
)
def chart_rows_get_id(id: UUID):
    """
    Rows: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/Svg/{id}',
    description=""" This endpoint is helpful for rending this Chart as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['chart_operations', 'svg_file_management'],
)
def charts_charts_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Charts: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Charts/{id}',
    description=""" Get by Id: Use this method to retrieve a Charts object by its primary key (id) """,
    tags=['chart_operations'],
)
def charts_charts_get_id(id: UUID):
    """
    Charts: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ConnectionShapes/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'slide_management', 'slides_management'],
)
def slides_connectionshapes_childobjects_get_id(id: UUID):
    """
    Slides: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ConnectionShapes/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['slide_management', 'slides_management', 'slides_element_management'],
)
def slides_connectionshapes_details_get_id(id: UUID):
    """
    Slides: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ConnectionShapes/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects. """,
    tags=['chart_xml_management', 'slides_management', 'slide_management'],
)
def slides_connectionshapes_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Slides: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/ConnectionShapes/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects. """,
    tags=['chart_xml_management', 'slides_management', 'slides_element_management'],
)
def slides_connectionshapes_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Slides: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ConnectionShapes/Svg/{id}',
    description=""" This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['svg_file_management', 'slide_management', 'slides_management'],
)
def slides_connectionshapes_svg_get_id_use_cache(
    id: UUID, use_cache: Optional[bool] = False
):
    """
    Slides: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ConnectionShapes/{id}',
    description=""" Get by Id: Use this method to retrieve a ConnectionShapes object by its primary key (id) """,
    tags=['slides_element_management', 'slide_shape_management'],
)
def slides_connectionshapes_get_id(id: UUID):
    """
    ConnectionShapes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Documents',
    description=""" Upload an OpenOfficeXml document (e.g., .xlsx, .pptx) for processing by the API. """,
    tags=['document_management'],
)
def documents_post(file: UploadFile):
    """
    Documents: Upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Documents/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this DocumentsController and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'document_management', 'slide_management'],
)
def documents_childobjects_get_id(id: UUID):
    """
    DocumentsController: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/Documents/Clone/{id}',
    description=""" Clone A Document that has already been uploaded to a new Story """,
    tags=['document_management'],
)
def documents_clone_post_id(id: UUID, body: DocumentCloneDTO = None):
    """
    Documents: Clone an existing Ooxml Document to new Parent Story
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Documents/DocumentType',
    description=""" List Types: Use this method to retreive a list of possible options for the DocumentType type. Use the Id from oneof the returned elements on to make changes to elements in the Documents object space. """,
    tags=['chart_type_management', 'document_management'],
)
def documents_documenttype_get():
    """
    DocumentType: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Documents/DocumentType/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['document_management', 'slide_management', 'slides_management'],
)
def documents_documenttype_typeid_get_type_id(type_id: int):
    """
    DocumentType: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Documents/DocumentType/{id}',
    description=""" Get by Id: Use this method to retrieve a DocumentType object by its primary key (id) """,
    tags=['document_management'],
)
def documents_documenttype_get_id(id: UUID):
    """
    DocumentType: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Documents/Download/{id}',
    description=""" Download the into a bytestream for client-side processing. """,
    tags=['document_management'],
)
def documents_download_get_id_orginal(id: UUID, orginal: Optional[bool] = False):
    """
    Documents: Download
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/Documents/{id}',
    description=""" Permantly delete a document from the Ooxml Automation API. Note that is does not make changes to the related Presalytics APIs.
Please use the delete endpoint in the story API to ensure that stories are not left with orphaned references to the Ooxml Automation API. """,
    tags=['document_management'],
)
def documents_delete_id(id: UUID):
    """
    Documents: Delete by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Documents/{id}',
    description=""" Get by Id: Use this method to retrieve a Documents object by its primary key (id) """,
    tags=['document_management'],
)
def documents_get_id(id: UUID):
    """
    Documents: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Groups/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'slides_management'],
)
def slides_groups_childobjects_get_id(id: UUID):
    """
    Slides: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Groups/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['slide_management', 'slides_management', 'slides_element_management'],
)
def slides_groups_details_get_id(id: UUID):
    """
    Slides: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Groups/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects. """,
    tags=['chart_xml_management', 'slide_management', 'slides_management'],
)
def slides_groups_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Slides: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Groups/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects. """,
    tags=['chart_xml_management', 'slides_management'],
)
def slides_groups_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Slides: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Groups/Svg/{id}',
    description=""" This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['svg_file_management', 'slide_management'],
)
def slides_groups_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Slides: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Groups/{id}',
    description=""" Get by Id: Use this method to retrieve a Groups object by its primary key (id) """,
    tags=['paragraph_management', 'text_container_management'],
)
def slides_groups_get_id(id: UUID):
    """
    Groups: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Images/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Shared and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'slide_management'],
)
def shared_images_childobjects_get_id(id: UUID):
    """
    Shared: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Images/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['document_management', 'slide_management', 'shared_image_management'],
)
def shared_images_details_get_id(id: UUID):
    """
    Shared: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Images/GetImage/{Id}',
    description=""" Download Images extracted from Ooxml Documents """,
    tags=['document_management', 'shared_image_management'],
)
def shared_images_getimage_put_id(id: UUID = Path(..., alias='Id')):
    """
    Image: Download Image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Images/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Shared object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Shared objects. """,
    tags=['chart_xml_management', 'slides_management'],
)
def shared_images_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Shared: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Images/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Shared object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Shared objects. """,
    tags=['chart_xml_management', 'slides_management'],
)
def shared_images_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Shared: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Images/Svg/{id}',
    description=""" This endpoint is helpful for rending this Shared as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['svg_file_management', 'document_management'],
)
def shared_images_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Shared: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Images/{id}',
    description=""" Get by Id: Use this method to retrieve a Images object by its primary key (id) """,
    tags=['shared_image_management'],
)
def shared_images_get_id(id: UUID):
    """
    Images: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ShapeTrees/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'slide_management', 'slides_management'],
)
def slides_shapetrees_childobjects_get_id(id: UUID):
    """
    Slides: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ShapeTrees/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['slide_management', 'slides_management'],
)
def slides_shapetrees_details_get_id(id: UUID):
    """
    Slides: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ShapeTrees/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects. """,
    tags=['chart_xml_management', 'slide_management', 'slides_management'],
)
def slides_shapetrees_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Slides: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/ShapeTrees/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects. """,
    tags=['chart_xml_management', 'slides_management', 'slides_element_management'],
)
def slides_shapetrees_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Slides: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ShapeTrees/Svg/{id}',
    description=""" This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['svg_file_management', 'slide_management', 'slides_management'],
)
def slides_shapetrees_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Slides: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ShapeTrees/{id}',
    description=""" Get by Id: Use this method to retrieve a ShapeTrees object by its primary key (id) """,
    tags=['slide_shape_management', 'slides_element_management'],
)
def slides_shapetrees_get_id(id: UUID):
    """
    ShapeTrees: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shapes/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'slide_management', 'slides_management'],
)
def slides_shapes_childobjects_get_id(id: UUID):
    """
    Slides: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shapes/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['slide_management', 'slides_management'],
)
def slides_shapes_details_get_id(id: UUID):
    """
    Slides: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shapes/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects. """,
    tags=['chart_xml_management', 'slides_management', 'slide_management'],
)
def slides_shapes_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Slides: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Shapes/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects. """,
    tags=['chart_xml_management', 'slide_management', 'slides_management'],
)
def slides_shapes_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Slides: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shapes/Svg/{id}',
    description=""" This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['svg_file_management', 'slide_management'],
)
def slides_shapes_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Slides: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shapes/{id}',
    description=""" Get by Id: Use this method to retrieve a Shapes object by its primary key (id) """,
    tags=['slide_shape_management'],
)
def slides_shapes_get_id(id: UUID):
    """
    Shapes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/ColorTransformationAttributes/{id}',
    description=""" Get by Id: Use this method to retrieve a ColorTransformationAttributes object by its primary key (id) """,
    tags=['color_management', 'theme_details_management'],
)
def shared_colortransformationattributes_get_id(id: UUID):
    """
    ColorTransformationAttributes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/ColorTransformations/{id}',
    description=""" Get by Id: Use this method to retrieve a ColorTransformations object by its primary key (id) """,
    tags=['color_management', 'theme_management', 'theme_details_management'],
)
def shared_colortransformations_get_id(id: UUID):
    """
    ColorTransformations: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/ColorTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the ColorTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space. """,
    tags=['color_management', 'theme_management', 'theme_details_management'],
)
def shared_colortypes_get():
    """
    ColorTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/ColorTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['color_management', 'theme_details_management'],
)
def shared_colortypes_typeid_get_type_id(type_id: int):
    """
    ColorTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/ColorTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a ColorTypes object by its primary key (id) """,
    tags=['color_management', 'theme_management', 'theme_details_management'],
)
def shared_colortypes_get_id(id: UUID):
    """
    ColorTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/DashTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the DashTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space. """,
    tags=['dash_type_management', 'chart_type_management'],
)
def shared_dashtypes_get():
    """
    DashTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/DashTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['dash_type_management', 'chart_operations'],
)
def shared_dashtypes_typeid_get_type_id(type_id: int):
    """
    DashTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/DashTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a DashTypes object by its primary key (id) """,
    tags=['dash_type_management'],
)
def shared_dashtypes_get_id(id: UUID):
    """
    DashTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/EffectAttributes/{id}',
    description=""" Get by Id: Use this method to retrieve a EffectAttributes object by its primary key (id) """,
    tags=['effect_management', 'theme_details_management'],
)
def shared_effectattributes_get_id(id: UUID):
    """
    EffectAttributes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/EffectTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the EffectTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space. """,
    tags=['effect_management', 'theme_management', 'theme_details_management'],
)
def shared_effecttypes_get():
    """
    EffectTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/EffectTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['effect_management', 'chart_type_management'],
)
def shared_effecttypes_typeid_get_type_id(type_id: int):
    """
    EffectTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/EffectTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a EffectTypes object by its primary key (id) """,
    tags=['effect_management'],
)
def shared_effecttypes_get_id(id: UUID):
    """
    EffectTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/Effects/{id}',
    description=""" Get by Id: Use this method to retrieve a Effects object by its primary key (id) """,
    tags=['chart_operations', 'chart_data_management', 'effect_management'],
)
def shared_effects_get_id(id: UUID):
    """
    Effects: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/FillMap/{id}',
    description=""" Get by Id: Use this method to retrieve a FillMap object by its primary key (id) """,
    tags=['fill_type_management', 'graphic_management', 'text_container_management'],
)
def shared_fillmap_get_id(id: UUID):
    """
    FillMap: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/FillTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the FillTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space. """,
    tags=['fill_type_management', 'chart_type_management'],
)
def shared_filltypes_get():
    """
    FillTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/FillTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['fill_type_management'],
)
def shared_filltypes_typeid_get_type_id(type_id: int):
    """
    FillTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/FillTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a FillTypes object by its primary key (id) """,
    tags=['fill_type_management'],
)
def shared_filltypes_get_id(id: UUID):
    """
    FillTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/GradientFills/{id}',
    description=""" Get by Id: Use this method to retrieve a GradientFills object by its primary key (id) """,
    tags=['fill_type_management', 'chart_operations'],
)
def shared_gradientfills_get_id(id: UUID):
    """
    GradientFills: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/GradientStops/{id}',
    description=""" Get by Id: Use this method to retrieve a GradientStops object by its primary key (id) """,
    tags=['fill_type_management', 'color_management'],
)
def shared_gradientstops_get_id(id: UUID):
    """
    GradientStops: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/ImageFills/{id}',
    description=""" Get by Id: Use this method to retrieve a ImageFills object by its primary key (id) """,
    tags=['shared_image_management', 'fill_type_management', 'solid_fill_management'],
)
def shared_imagefills_get_id(id: UUID):
    """
    ImageFills: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/LineEndSizes',
    description=""" List Types: Use this method to retreive a list of possible options for the LineEndSizes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space. """,
    tags=['line_end_management', 'line_type_management'],
)
def shared_lineendsizes_get():
    """
    LineEndSizes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/LineEndSizes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['line_end_management', 'line_type_management', 'chart_data_management'],
)
def shared_lineendsizes_typeid_get_type_id(type_id: int):
    """
    LineEndSizes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/LineEndSizes/{id}',
    description=""" Get by Id: Use this method to retrieve a LineEndSizes object by its primary key (id) """,
    tags=['line_end_management'],
)
def shared_lineendsizes_get_id(id: UUID):
    """
    LineEndSizes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/LineEndTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the LineEndTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space. """,
    tags=['line_end_management', 'line_type_management'],
)
def shared_lineendtypes_get():
    """
    LineEndTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/LineEndTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['line_end_management', 'line_type_management'],
)
def shared_lineendtypes_typeid_get_type_id(type_id: int):
    """
    LineEndTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/LineEndTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a LineEndTypes object by its primary key (id) """,
    tags=['line_end_management', 'line_type_management'],
)
def shared_lineendtypes_get_id(id: UUID):
    """
    LineEndTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/Lines/{id}',
    description=""" Get by Id: Use this method to retrieve a Lines object by its primary key (id) """,
    tags=['paragraph_management', 'document_management'],
)
def shared_lines_get_id(id: UUID):
    """
    Lines: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/Paragraph/{id}',
    description=""" Get by Id: Use this method to retrieve a Paragraph object by its primary key (id) """,
    tags=['paragraph_management', 'document_management'],
)
def shared_paragraph_get_id(id: UUID):
    """
    Paragraph: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/SolidFills/{id}',
    description=""" Get by Id: Use this method to retrieve a SolidFills object by its primary key (id) """,
    tags=['solid_fill_management'],
)
def shared_solidfills_get_id(id: UUID):
    """
    SolidFills: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/Text/{id}',
    description=""" Get by Id: Use this method to retrieve a Text object by its primary key (id) """,
    tags=['document_management', 'paragraph_management', 'text_container_management'],
)
def shared_text_get_id(id: UUID):
    """
    Text: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Shared/TextContainer/{id}',
    description=""" Get by Id: Use this method to retrieve a TextContainer object by its primary key (id) """,
    tags=['text_container_management'],
)
def shared_textcontainer_get_id(id: UUID):
    """
    TextContainer: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'slide_management', 'slides_management'],
)
def slides_slides_childobjects_get_id(id: UUID):
    """
    Slides: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/ColorMaps/{id}',
    description=""" Get by Id: Use this method to retrieve a ColorMaps object by its primary key (id) """,
    tags=['color_management', 'theme_management', 'theme_details_management'],
)
def slides_colormaps_get_id(id: UUID):
    """
    ColorMaps: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['slide_management', 'slides_management'],
)
def slides_slides_details_get_id(id: UUID):
    """
    Slides: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/GraphicTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the GraphicTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Slides object space. """,
    tags=['chart_type_management', 'graphic_management'],
)
def slides_graphictypes_get():
    """
    GraphicTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/GraphicTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['graphic_management', 'chart_type_management'],
)
def slides_graphictypes_typeid_get_type_id(type_id: int):
    """
    GraphicTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/GraphicTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a GraphicTypes object by its primary key (id) """,
    tags=['graphic_management'],
)
def slides_graphictypes_get_id(id: UUID):
    """
    GraphicTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/Graphics/{id}',
    description=""" Get by Id: Use this method to retrieve a Graphics object by its primary key (id) """,
    tags=['graphic_management'],
)
def slides_graphics_get_id(id: UUID):
    """
    Graphics: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/GroupElementTypes',
    description=""" List Types: Use this method to retreive a list of possible options for the GroupElementTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Slides object space. """,
    tags=['group_element_management', 'chart_type_management'],
)
def slides_groupelementtypes_get():
    """
    GroupElementTypes: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/GroupElementTypes/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['group_element_management', 'chart_type_management'],
)
def slides_groupelementtypes_typeid_get_type_id(type_id: int):
    """
    GroupElementTypes: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/GroupElementTypes/{id}',
    description=""" Get by Id: Use this method to retrieve a GroupElementTypes object by its primary key (id) """,
    tags=['group_element_management'],
)
def slides_groupelementtypes_get_id(id: UUID):
    """
    GroupElementTypes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/GroupElements/{id}',
    description=""" Get by Id: Use this method to retrieve a GroupElements object by its primary key (id) """,
    tags=['group_element_management'],
)
def slides_groupelements_get_id(id: UUID):
    """
    GroupElements: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects. """,
    tags=['chart_xml_management', 'slide_management', 'slides_management'],
)
def slides_slides_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Slides: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Slides/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects. """,
    tags=['chart_xml_management', 'slides_management', 'slides_element_management'],
)
def slides_slides_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Slides: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/SlideMasters/{id}',
    description=""" Get by Id: Use this method to retrieve a SlideMasters object by its primary key (id) """,
    tags=['slide_management', 'slides_management'],
)
def slides_slidemasters_get_id(id: UUID):
    """
    SlideMasters: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/Svg/{id}',
    description=""" This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['svg_file_management', 'slide_management'],
)
def slides_slides_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Slides: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Slides/{id}',
    description=""" Get by Id: Use this method to retrieve a Slides object by its primary key (id) """,
    tags=['slide_management', 'slides_management'],
)
def slides_slides_get_id(id: UUID):
    """
    Slides: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/SmartArts/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'slide_management', 'slides_management'],
)
def slides_smartarts_childobjects_get_id(id: UUID):
    """
    Slides: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/SmartArts/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['slide_management', 'slides_management'],
)
def slides_smartarts_details_get_id(id: UUID):
    """
    Slides: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/SmartArts/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects. """,
    tags=['chart_xml_management', 'slide_management', 'slides_management'],
)
def slides_smartarts_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Slides: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/SmartArts/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects. """,
    tags=['chart_xml_management', 'slides_management', 'slides_element_management'],
)
def slides_smartarts_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Slides: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/SmartArts/Svg/{id}',
    description=""" This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['slide_management', 'svg_file_management'],
)
def slides_smartarts_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Slides: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/SmartArts/{id}',
    description=""" Get by Id: Use this method to retrieve a SmartArts object by its primary key (id) """,
    tags=['smartart_management'],
)
def slides_smartarts_get_id(id: UUID):
    """
    SmartArts: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/Borders/{id}',
    description=""" Get by Id: Use this method to retrieve a Borders object by its primary key (id) """,
    tags=['theme_management', 'theme_details_management'],
)
def tables_borders_get_id(id: UUID):
    """
    Borders: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/Cells/{id}',
    description=""" Get by Id: Use this method to retrieve a Cells object by its primary key (id) """,
    tags=['table_management', 'text_container_management', 'paragraph_management'],
)
def tables_cells_get_id(id: UUID):
    """
    Cells: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Table and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'table_management'],
)
def tables_tables_childobjects_get_id(id: UUID):
    """
    Tables: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/Columns/{id}',
    description=""" Get by Id: Use this method to retrieve a Columns object by its primary key (id) """,
    tags=['chart_data_management', 'slide_management'],
)
def tables_columns_get_id(id: UUID):
    """
    Columns: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['table_management'],
)
def tables_tables_details_get_id(id: UUID):
    """
    Tables: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Table object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Table objects. """,
    tags=['chart_xml_management', 'table_management'],
)
def tables_tables_openofficexml_get_id_updated(
    id: UUID, updated: Optional[bool] = True
):
    """
    Tables: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Tables/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Table object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Table objects. """,
    tags=['chart_xml_management', 'table_management'],
)
def tables_tables_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Tables: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/Rows/{id}',
    description=""" Get by Id: Use this method to retrieve a Rows object by its primary key (id) """,
    tags=['document_management', 'paragraph_management', 'text_container_management'],
)
def tables_rows_get_id(id: UUID):
    """
    Rows: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/Svg/{id}',
    description=""" This endpoint is helpful for rending this Table as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['svg_file_management', 'table_management'],
)
def tables_tables_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Tables: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/TableUpdate/{id}',
    description=""" Gets a TabletDataDTO object, usually used for downstream updates to table content """,
    tags=['table_management'],
)
def tables_tables_tableupdate_get_id(id: UUID):
    """
    Table: Get Table Data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Tables/TableUpdate/{id}',
    description=""" Simplifies table update by allowing users to supply strings to table cells  via TableDataDTO """,
    tags=['table_management'],
)
def tables_tables_tableupdate_put_id(id: str, body: TableTableDataDTO = None):
    """
    Tables: Update Table Data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Tables/{id}',
    description=""" Get by Id: Use this method to retrieve a Tables object by its primary key (id) """,
    tags=['table_management'],
)
def tables_tables_get_id(id: UUID):
    """
    Tables: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/BackgroundFills/{id}',
    description=""" Get by Id: Use this method to retrieve a BackgroundFills object by its primary key (id) """,
    tags=['fill_type_management', 'solid_fill_management'],
)
def themes_backgroundfills_get_id(id: UUID):
    """
    BackgroundFills: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/ChildObjects/{id}',
    description=""" This endpoint is helpful for helping users and bots identify dependent objects to this Theme and retreive their corresponding metadata in order to make modifications to those objects in downstream operations. """,
    tags=['dependency_management', 'slides_management', 'document_management'],
)
def theme_themes_childobjects_get_id(id: UUID):
    """
    Theme: Get Dependent Objects Tree
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/Colors/{id}',
    description=""" Get by Id: Use this method to retrieve a Colors object by its primary key (id) """,
    tags=['color_management', 'theme_management', 'theme_details_management'],
)
def themes_colors_get_id(id: UUID):
    """
    Colors: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/CustomColors/{id}',
    description=""" Get by Id: Use this method to retrieve a CustomColors object by its primary key (id) """,
    tags=['color_management', 'theme_details_management'],
)
def themes_customcolors_get_id(id: UUID):
    """
    CustomColors: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/Details/{id}',
    description=""" Returns object metadata and information about relative dependent objects  """,
    tags=['theme_management', 'theme_details_management'],
)
def theme_themes_details_get_id(id: UUID):
    """
    Theme: Get Details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/EffectMap/{id}',
    description=""" Get by Id: Use this method to retrieve a EffectMap object by its primary key (id) """,
    tags=['effect_management'],
)
def themes_effectmap_get_id(id: UUID):
    """
    EffectMap: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/Fills/{id}',
    description=""" Get by Id: Use this method to retrieve a Fills object by its primary key (id) """,
    tags=['fill_type_management', 'solid_fill_management'],
)
def themes_fills_get_id(id: UUID):
    """
    Fills: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/Fonts/{id}',
    description=""" Get by Id: Use this method to retrieve a Fonts object by its primary key (id) """,
    tags=['theme_management', 'theme_details_management'],
)
def themes_fonts_get_id(id: UUID):
    """
    Fonts: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/Intensity',
    description=""" List Types: Use this method to retreive a list of possible options for the Intensity type. Use the Id from oneof the returned elements on to make changes to elements in the Themes object space. """,
    tags=['theme_intensity_management', 'theme_management'],
)
def themes_intensity_get():
    """
    Intensity: List All Possible Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/Intensity/TypeId/{type_id}',
    description=""" This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api. """,
    tags=['theme_intensity_management', 'theme_management'],
)
def themes_intensity_typeid_get_type_id(type_id: int):
    """
    Intensity: Get By Type Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/Intensity/{id}',
    description=""" Get by Id: Use this method to retrieve a Intensity object by its primary key (id) """,
    tags=['theme_intensity_management'],
)
def themes_intensity_get_id(id: UUID):
    """
    Intensity: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/LineMap/{id}',
    description=""" Get by Id: Use this method to retrieve a LineMap object by its primary key (id) """,
    tags=['slide_management', 'document_management'],
)
def themes_linemap_get_id(id: UUID):
    """
    LineMap: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/OpenOfficeXml/{id}',
    description=""" Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Theme object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Theme objects. """,
    tags=['chart_xml_management', 'theme_management', 'theme_details_management'],
)
def theme_themes_openofficexml_get_id_updated(id: UUID, updated: Optional[bool] = True):
    """
    Theme: Get Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/Themes/OpenOfficeXml/{id}',
    description=""" Directly eidt the underlying xml of a Theme object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Theme objects. """,
    tags=['chart_xml_management', 'theme_management', 'theme_details_management'],
)
def theme_themes_openofficexml_put_id(id: str, body: OoxmlDTO = None):
    """
    Theme: Modify Underlying Xml
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/Svg/{id}',
    description=""" This endpoint is helpful for rending this Theme as an svg or image object that can then be rendered in a story, dashboard or website. """,
    tags=['svg_file_management'],
)
def theme_themes_svg_get_id_use_cache(id: UUID, use_cache: Optional[bool] = False):
    """
    Theme: Get Svg file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/Themes/{id}',
    description=""" Get by Id: Use this method to retrieve a Themes object by its primary key (id) """,
    tags=['theme_management', 'theme_details_management'],
)
def theme_themes_get_id(id: UUID):
    """
    Themes: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
